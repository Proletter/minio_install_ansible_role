---
- name: Compose the Minio server download base url
  set_fact:
    _minio_server_file_path: "{{ bin_file_path }}"

- name: Compose the Minio server download url with latest release
  set_fact:
    _minio_server_download_path: "{{ _minio_server_file_path }}/minio"
  when: minio_server_release | length == 0

- name: "Compose the Minio server download url with release {{ minio_server_release }}"
  set_fact:
    _minio_server_download_path: "{{ _minio_server_file_path }}/minio.{{ minio_server_release }}"
  when: minio_server_release | length > 0

- name: Create Minio group
  ansible.builtin.group:
    name: "{{ minio_group }}"
    state: present

- name: Create Minio user
  ansible.builtin.user:
    name: "{{ minio_user }}"
    group: "{{ minio_group }}"
    system: "yes"
    shell: "/usr/sbin/nologin"

- name: Create the Minio data storage directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: 0750
  when: minio_server_make_datadirs
  with_items: "{{ minio_server_datadirs }}"

- name: Copy the Minio server
  ansible.builtin.copy:
    src: "{{ _minio_server_download_path }}"
    dest: "{{ minio_server_bin }}"
    owner: "root"
    group: "root"
    mode: 0755
  register: _copy_server
  until: _copy_server is succeeded
  retries: 5
  delay: 2
  notify: restart minio

- name: Make binary executable
  ansible.builtin.file:
    path: "{{ minio_server_bin }}"
    mode: 'u+x'

- name: Generate the Minio server envfile
  ansible.builtin.template:
    src: minio.env.j2
    dest: "{{ minio_server_envfile }}"
    owner: "root"
    group: "{{ minio_group }}"
    mode: 0640
  notify: restart minio

- name: Generate credentials-velero file
  ansible.builtin.template:
    src: credentials-velero.j2
    dest: "/usr/local/bin/credentials-velero"
    mode: 0600
  vars:
    secret: "{{ minio_secret_key }}"
    access_key: "{{ minio_access_key }}"

# s3url and port
- name: Get remote host current IP address
  command: curl -s ifconfig.me
  register: ip_address_output
  changed_when: false

- name: Create file with IP address and port
  copy:
    content: "{{ ip_address_output.stdout }}{{ minio_server_addr }}"
    dest: /usr/local/bin/s3url.txt
  become: true

- name: Create the Minio server systemd config
  ansible.builtin.template:
    src: minio.service.j2
    dest: "/etc/systemd/system/minio.service"
    owner: "root"
    group: "root"
  when: ansible_service_mgr == "systemd"
  notify:
    - reload minio systemd
    - restart minio

- name: Create the Minio server init.d config
  ansible.builtin.template:
    src: minio.init.j2
    dest: "/etc/init.d/minio"
    owner: "root"
    group: "root"
    mode: 0750
  when: ansible_service_mgr != "systemd"
  notify: restart minio

- name: Enable and start the Minio service
  ansible.builtin.service:
    name: minio
    state: started
    enabled: true

- name: Install firewalld package
  dnf:
    name: firewalld
    state: present
  ignore_errors: true

- name: Install python-firewall package
  dnf:
    name: python3-firewall
    state: present

- name: Open ports
  ansible.posix.firewalld:
    state: enabled
    port: "{{ minio_console_port | regex_replace(':', '') }}/tcp"
    immediate: yes
    permanent: yes
  ignore_errors: true



